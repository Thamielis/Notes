{
  "Synopsis": "Calculates a unique hash value for file content and strings, and is capable of calculating partial hashes to speed up calculation for large content",
  "Description": "Calculates a cryptographic hash for file content and strings to identify identical content. \nThis can take a long time for large files since the entire file content needs to be read.\nIn most cases, duplicate files can safely be identified by looking at only part of their content.\nBy using parameters -StartPosition and -Length, you can define the partial content that should be used for hash calculation.\nAny file or string exceeding the size specified in -Length plus -StartPosition will be using a partial hash\nunless -Force is specified. This speeds up hash calculation tremendously, especially across the network.\nIt is recommended that partial hashes are verified by calculating a full hash once it matters.\nSo if indeed two large files share the same hash, you should use -Force to calculate their hash again.\nEven though you need to calculate the hash twice, calculating a partial hash is very fast and makes sure\nyou calculate the expensive full hash only for files that have potential duplicates.",
  "Parameters": [
    {
      "Name": null,
      "Type": null,
      "Description": "",
      "Required": false,
      "Position": 0,
      "Aliases": null,
      "DefaultValue": null,
      "Globbing": false,
      "PipelineInput": null,
      "variableLength": false
    }
  ],
  "Notes": [
    null
  ],
  "CommandType": "Function",
  "Component": [
    null
  ],
  "Inputs": [
    null
  ],
  "Outputs": [
    null
  ],
  "Links": [
    "https://powershell.one"
  ],
  "Examples": [
    {
      "Title": "EXAMPLE 1",
      "Markdown": "",
      "Code": "Get-PsOneFileHash -String \"Hello World!\" -Algorithm MD5\r\nCalculates the hash for a string using the MD5 algorithm"
    },
    {
      "Title": "EXAMPLE 2",
      "Markdown": "",
      "Code": "Get-PSOneFileHash -Path \"$home\\Documents\\largefile.mp4\" -StartPosition 1000 -Length 1MB -Algorithm SHA1\r\nCalculates the hash for the file content. If the file is larger than 1MB+1000, a partial hash is calculated,\r\nstarting at byte position 1000, and using 1MB of data"
    },
    {
      "Title": "EXAMPLE 3",
      "Markdown": "",
      "Code": "Get-ChildItem -Path $home -Recurse -File -ErrorAction SilentlyContinue | \r\n    Get-PsOnePartialFileHash -StartPosition 1KB -Length 1MB -BufferSize 1MB -AlgorithmName SHA1 |\r\n    Group-Object -Property Hash, Length | \r\n    Where-Object Count -gt 1 |\r\n    ForEach-Object {\r\n        $_.Group | Select-Object -Property Length, Hash, Path\r\n    } |\r\n    Out-GridView -Title 'Potential Duplicate Files'\r\nTakes all files from the user profile and calculates a hash for each. Large files use a partial hash.\r\nResults are grouped by hash and length. Any group with more than one member contains potential\r\nduplicates. These are shown in a gridview."
    }
  ]
}