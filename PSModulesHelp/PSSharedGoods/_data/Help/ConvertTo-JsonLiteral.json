{
  "Synopsis": "Converts an object to a JSON-formatted string.",
  "Description": "The ConvertTo-Json cmdlet converts any object to a string in JavaScript Object Notation (JSON) format. The properties are converted to field names, the field values are converted to property values, and the methods are removed.",
  "Parameters": [
    {
      "Name": null,
      "Type": null,
      "Description": "",
      "Required": false,
      "Position": 0,
      "Aliases": null,
      "DefaultValue": null,
      "Globbing": false,
      "PipelineInput": null,
      "variableLength": false
    }
  ],
  "Notes": [
    "General notes"
  ],
  "CommandType": "Function",
  "Component": [
    null
  ],
  "Inputs": [
    null
  ],
  "Outputs": [
    null
  ],
  "Links": [],
  "Examples": [
    {
      "Title": "EXAMPLE 1",
      "Markdown": "",
      "Code": "Get-Process | Select-Object -First 2 | ConvertTo-JsonLiteral"
    },
    {
      "Title": "EXAMPLE 2",
      "Markdown": "",
      "Code": "Get-Process | Select-Object -First 2 | ConvertTo-JsonLiteral -Depth 3"
    },
    {
      "Title": "EXAMPLE 3",
      "Markdown": "",
      "Code": "Get-Process | Select-Object -First 2 | ConvertTo-JsonLiteral -NewLineFormat $NewLineFormat = @{\r\n    NewLineCarriage = '\\r\\n'\r\n    NewLine         = \"\\n\"\r\n    Carriage        = \"\\r\"\r\n} -NumberAsString -BoolAsString"
    },
    {
      "Title": "EXAMPLE 4",
      "Markdown": "",
      "Code": "Get-Process | Select-Object -First 2 | ConvertTo-JsonLiteral -NumberAsString -BoolAsString -DateTimeFormat \"yyyy-MM-dd HH:mm:ss\""
    },
    {
      "Title": "EXAMPLE 5",
      "Markdown": "Keep in mind this advanced replace will break ConvertFrom-Json, but it's sometimes useful for projects like PSWriteHTML",
      "Code": "Get-Process | Select-Object -First 2 | ConvertTo-JsonLiteral -NewLineFormat $NewLineFormat = @{\r\n    NewLineCarriage = '\\r\\n'\r\n    NewLine         = \"\\n\"\r\n    Carriage        = \"\\r\"\r\n} -NumberAsString -BoolAsString -AdvancedReplace @{ '.' = '\\.'; '$' = '\\$' }"
    }
  ]
}